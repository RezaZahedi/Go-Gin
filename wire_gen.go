// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package main

import (
	"github.com/RezaZahedi/Go-Gin/REST_api"
	"github.com/RezaZahedi/Go-Gin/database"
	"github.com/RezaZahedi/Go-Gin/product"
	"github.com/RezaZahedi/Go-Gin/user"
	"github.com/gin-gonic/gin"
	"github.com/google/wire"
)

// Injectors from wire.go:

func initProductAPI(db *database.BookDB) *REST_api.ProductAPI {
	productRepository := product.ProvideProductRepository(db)
	productService := product.ProvideProductService(productRepository)
	productAPI := REST_api.ProvideProductAPI(productService)
	return productAPI
}

func initUserAPI(db *database.UserDB) *REST_api.UserAPI {
	userRepository := user.ProvideUserRepository(db)
	userService := user.ProvideUserService(userRepository)
	userAPI := REST_api.ProvideUserAPI(userService)
	return userAPI
}

func initUserBookREST(router *gin.Engine) error {
	bookDB := database.NewBookDB()
	productRepository := product.ProvideProductRepository(bookDB)
	productService := product.ProvideProductService(productRepository)
	productAPI := REST_api.ProvideProductAPI(productService)
	userDB := database.NewUserDB()
	userRepository := user.ProvideUserRepository(userDB)
	userService := user.ProvideUserService(userRepository)
	userAPI := REST_api.ProvideUserAPI(userService)
	error2 := REST_api.InitializeRoutes(router, productAPI, userAPI)
	return error2
}

// wire.go:

var ProductAPISet = wire.NewSet(database.NewBookDB, product.ProvideProductRepository, product.ProvideProductService, REST_api.ProvideProductAPI)

var UserAPISet = wire.NewSet(database.NewUserDB, user.ProvideUserRepository, user.ProvideUserService, REST_api.ProvideUserAPI)
